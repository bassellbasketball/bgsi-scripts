local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local remote = ReplicatedStorage:WaitForChild("Shared")
    :WaitForChild("Framework")
    :WaitForChild("Network")
    :WaitForChild("Remote")
    :WaitForChild("RemoteEvent")

local LocalData = require(ReplicatedStorage.Client.Framework.Services.LocalData)

local priority = {
    ["Sinister Lord"] = 1,
    ["King Skull"] = 2,
    ["Sinister Skull"] = 3,
    ["Guardian Skull"] = 4,
    ["Wolf Skull"] = 5,
    ["Angelic Skull"] = 6,
    ["All Seeing Shard"] = 7,
    ["Witches Pot"] = 8,
    ["Equinox"] = 9,
    ["Crimson Eye"] = 10,
    ["Pure Vessel"] = 11,
    ["Dark Vessel"] = 12,
    ["Light Vessel"] = 13,
}

task.spawn(function()
    while true do
        local ok, data = pcall(function()
            return LocalData:Get()
        end)

        if ok and data and data.Pets then
            local equipped = {}
            local equippedList = {}
            if data.Teams and data.TeamEquipped then
                local team = data.Teams[data.TeamEquipped]
                if team and team.Pets then
                    for _, id in ipairs(team.Pets) do
                        equipped[id] = true
                        table.insert(equippedList, id)
                    end
                end
            end

            local pets = {}
            for _, pet in pairs(data.Pets) do
                if priority[pet.Name] then
                    table.insert(pets, pet)
                end
            end

            table.sort(pets, function(a, b)
                return priority[a.Name] < priority[b.Name]
            end)

            for _, pet in ipairs(pets) do
                if not equipped[pet.Id] then
                    if #equippedList > 0 then
                        local worstId, worstPriority
                        for _, eid in ipairs(equippedList) do
                            local ePet
                            for _, p in pairs(data.Pets) do
                                if p.Id == eid then
                                    ePet = p
                                    break
                                end
                            end
                            if ePet and priority[ePet.Name] then
                                local pr = priority[ePet.Name]
                                if not worstPriority or pr > worstPriority then
                                    worstPriority = pr
                                    worstId = ePet.Id
                                end
                            end
                        end
                        if worstId and worstPriority and priority[pet.Name] < worstPriority then
                            remote:FireServer("UnequipPet", worstId)
                            task.wait(0.1)
                            remote:FireServer("EquipPet", pet.Id)
                            task.wait(0.1)
                            for i, eid in ipairs(equippedList) do
                                if eid == worstId then
                                    table.remove(equippedList, i)
                                    break
                                end
                            end
                            table.insert(equippedList, pet.Id)
                        end
                    else
                        remote:FireServer("EquipPet", pet.Id)
                        task.wait(0.1)
                        table.insert(equippedList, pet.Id)
                    end
                end
            end
        end
        task.wait(5)
    end
end)
