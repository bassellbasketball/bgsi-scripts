local s = "{\"AutoCompetitionQuests\":false,\"ShinyRatio\":\"0\",\"AutoFestivalSpinWheel\":true,\"AutoPressE\":true,\"fishing-shop\":[],\"HideHatchAnim\":true,\"SelectMasteries\":[],\"SellSlider\":100,\"AutoDiceChest\":false,\"Webhook\":\"\",\"Autospooky-shop\":false,\"Autohalloween-shop\":false,\"AutoSuperChest\":false,\"UniqueEggToHatch\":[\"Mining Egg\"],\"EpicEggToHatch\":[\"Mining Egg\"],\"NormalRatio\":\"0\",\"SelectTeamThe Overworld\":[],\"AutoChest\":true,\"EnchantMethod\":[\"Gems first, get one, use reroll Orb\"],\"AutoMastery\":false,\"SelectChests\":[\"Giant Chest\",\"Void Chest\",\"Ticket Chest\"],\"Autofestival-shop\":false,\"AutoAutumnSpinWheel\":true,\"AutoDogJump\":false,\"AutoCartEscape\":false,\"SpecificRatio\":\"0\",\"UserIdToPing\":\"everyone\",\"RareEggToHatch\":[\"Mining Egg\"],\"BlessingTimeDreamerShrine\":3660,\"StartEnchanting\":false,\"SelectPotionsToUseRift10\":[],\"PreferredEggToHatch\":[\"Mining Egg\"],\"AutoGoToRiftEggs\":false,\"AutoPlaytime\":true,\"SelectPotionsToUseRift1\":[],\"CommonEggToHatch\":[\"Mining Egg\"],\"LegendaryEggToHatch\":[\"Mining Egg\"],\"SelectEgg\":[\"Mutant Egg\"],\"AutoPetMatch\":false,\"SelectPotionsToUseRift25\":[],\"AutoShrine\":true,\"AutoRiftGift\":false,\"LuckyMutantEgg\":true,\"MythicEggToHatch\":[\"Mining Egg\"],\"AutoGoldChest\":false,\"SelectTiles\":[],\"AutoPotion\":true,\"AutoCoinsForce\":false,\"BlessingTime\":11.65,\"ShinyOnly\":false,\"Autodice-shop\":false,\"dice-shop\":[],\"RenderDistance\":2,\"AutoFishing\":false,\"BuyAll\":true,\"SelectDonateItemsDreamerShrine\":[],\"GoldKeySlider\":1,\"MinigameDifficulties\":[\"Insane\"],\"HatchAmount\":[],\"AutoCoins\":true,\"shard-shop\":[],\"AutoOpenEgg\":true,\"AutoSpinWheel\":true,\"DetermineBestEgg\":[],\"NotifyLegendary\":true,\"AutoSellBubble\":false,\"SelectPotionsToUseNormal\":[\"Egg Elixir 1\",\"Infinity Elixir 1\",\"Lucky 7\",\"Mythic 7\",\"Speed 7\",\"Halloween Elixir 4\"],\"spooky-shop\":[\"Infinity Elixir\",\"Egg Elixir\",\"Secret Elixir\",\"Halloween Spin Ticket\",\"Halloween Elixir 1\",\"Halloween Elixir 2\",\"Halloween Elixir 3\",\"Halloween Elixir 4\",\"Lucky 6\",\"Coins 6\",\"Mythic 6\",\"Lucky 7\",\"Coins 7\",\"Mythic 7\",\"Speed 7\",\"Reroll Orb\",\"Power Orb\",\"Royal Key\",\"Super Key\"],\"Autoshard-shop\":false,\"AutoDonateToDreamerShrine\":false,\"ShinyMythicOnly\":false,\"SelectPotionsToUseAura\":[],\"AutoBubble\":false,\"SelectSellLocation\":[],\"AutoRollDice\":false,\"halloween-shop\":[],\"AutoHalloweenUpgrades\":true,\"AutoTrickOrTreat\":true
,\"alien-shop\":[],\"festival-shop\":[],\"Autotraveling-merchant\":false,\"EnabledQuestTypes\":[\"Mythic\",\"Shiny\",\"Normal\",\"SpecificRarity\"],\"traveling-merchant\":[],\"Autofishing-shop\":false,\"AutoRobotClaw\":false,\"AutoHyperDarts\":false,\"RareEggPriority\":false,\"MythicRatio\":\"0\",\"HideTransition\":true,\"SelectMinigamesToSkipTime\":[\"Corn Maze\"],\"SelectDonateMutationsDreamerShrine\":[],\"AutoRoyalChest\":false,\"SelectEggRift\":[],\"Autoalien-shop\":false,\"SelectedEnchants\":[\"gleaming 1\"],\"MythicOnly\":false,\"AlwaysNotifySecrets\":true,\"SelectPotionsToUseRift5\":[],\"AutoMysteryBox\":false,\"SelectTeamMinigame Paradise\":[],\"SelectDonateItems\":[\"Coins 6\",\"Speed 6\",\"Tickets 6\",\"Lucky 6\",\"Mythic 6\",\"Speed 5\",\"Tickets 5\",\"Mythic 5\",\"Lucky 5\",\"Coins 5\",\"Tickets 4\",\"Coins 4\",\"Speed 4\",\"Lucky 4\",\"Mythic 4\",\"Lucky 3\",\"Coins 3\",\"Mythic 3\",\"Tickets 3\",\"Speed 3\",\"Lucky 2\",\"Coins 2\",\"Speed 2\",\"Mythic 2\",\"Tickets 2\",\"Tickets 1\",\"Mythic 1\",\"Coins 1\",\"Lucky 1\",\"Speed 1\"],\"MinimumRarity\":\"69420\",\"AutoClaimFreeSpin\":false}"
local s2 = "{\"Mutant Egg\":{\"Y\":26.11751937866211,\"X\":-4939.6494140625,\"Z\":-547.0823364257813}}"
if not isfolder("IdiotHub") then makefolder("IdiotHub") end
local path = "IdiotHub/Bubble Gum Simulator Infinity.rfld"
local path2 = "IdiotHub/bgsiEggs.json"
local ok2, existing = pcall(readfile, path2)
local newData = game:GetService("HttpService"):JSONDecode(s2)
if ok2 then
    local ok3, existingData = pcall(function()
        return game:GetService("HttpService"):JSONDecode(existing)
    end)
    if ok3 and type(existingData) == "table" then
        for k,v in pairs(newData) do
            existingData[k] = v
        end
        s2 = game:GetService("HttpService"):JSONEncode(existingData)
    end
end
writefile(path2, s2)
writefile(path, s)
loadstring(game:HttpGet("https://raw.githubusercontent.com/IdiotHub/Scripts/main/Loader"))()
